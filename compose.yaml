services:
  rabbitmq:
    extends:
      file: common.yml
      service: base-rabbit
    container_name: 'rabbitmq'
    hostname: rabbitmq
    profiles: ["prod", "dev"]
    # volumes:
    #   - ./container-volumes/rabbitmq/data/:/var/lib/rabbitmq/
    #   - ./container-volumes/rabbitmq/logs/:/var/log/rabbitmq
    networks:
      - rabbitmq_net

  # Databases
  mongodb:
    extends:
      file: common.yml
      service: base-mongo
    container_name: mongodb
    profiles: ["prod", "dev"]
    ports:
      - "27018:27017"
    volumes:
      - ./container-volumes/db/:/data/db
    networks:
      - backend_net

  customer:
    build:
      dockerfile: Dockerfile.prod
      context: ./customer
    profiles: ["prod"]
    container_name: customer
    ports:
      - "8001:8001"
    restart: on-failure
    depends_on:
      mongodb:
        # NOTE: specifies that a dependency is expected to be "healthy" (as indicated by healthcheck) before starting a dependent service.
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app/
    env_file:
      - ./customer/.env.prod
    networks:
      - rabbitmq_net
      - backend_net

  products:
    build:
      dockerfile: Dockerfile.prod
      context: ./products
    profiles: ["prod"]
    container_name: products
    ports:
      - "8002:8002"
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
    env_file:
      - ./products/.env.prod
    networks:
      - rabbitmq_net
      - backend_net

  shopping:
    build:
      dockerfile: Dockerfile.prod
      context: ./shopping
    profiles: ["prod"]
    container_name: shopping
    ports:
      - "8003:8003"
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
    env_file:
      - ./shopping/.env.prod
    networks:
      - rabbitmq_net
      - backend_net

  nginx-proxy:
    build:
      dockerfile: Dockerfile
      context: ./proxy
    profiles: ["prod"]
    restart: always
    depends_on:
      - products
      - shopping
      - customer
    ports:
      - 80:80
    networks:
      - backend_net
      - frontend_net

  webapp:
    build:
      dockerfile: Dockerfile.prod
      context: ./shopping_app_frontend
    profiles: ["prod"]
    container_name: webapp
    ports:
      - "3000:3000"
    restart: on-failure
    depends_on:
      - "nginx-proxy"
    environment:
      - NODE_ENV=production
    env_file:
      - ./shopping_app_frontend/.env.prod
    networks:
      - frontend_net

networks:
  rabbitmq_net:
    driver: bridge
  backend_net:
    driver: bridge
  frontend_net:
    driver: bridge
