services:

# NOTE: 
# The containers in this compose file are separated into 'dev' and 'prod' profiles.
# The purpose of the 'dev' profile is to only run external services like databases and rabbitmq 
# and use locally running backend servicee.
# =====================================================================================
#     - To run dev profiles use: `docker compose --profile=dev up --build`
# =====================================================================================
#
# NOTE:
# Using the 'prod' profile is intended to run all containers as intended and have a functional 
# production environment
# =====================================================================================
#     - To run prod profiles use: `docker compose --profile=prod up --build`
# =====================================================================================

  # ---------- RabbitMQ ----------
  rabbitmq:
    extends:
      file: common.yml
      service: base-rabbit
    container_name: 'rabbitmq'
    hostname: rabbitmq
    profiles: ["prod", "dev"]
    volumes:
      - ./container-volumes/rabbitmq/data/:/var/lib/rabbitmq/
      # - ./container-volumes/rabbitmq/logs/:/var/log/rabbitmq
    networks:
      - rabbitmq_net

  # ---------- Databases ----------
  mongodb-customer:
    extends:
      file: common.yml
      service: base-mongo
    container_name: mongodb-customer
    profiles: ["prod", "dev"]
    ports:
      - "27018:27017"
    volumes:
      - ./container-volumes/db-customer/:/data/db
    networks:
      - customer_db_net
      - db_seeder_net

  mongodb-products:
    extends:
      file: common.yml
      service: base-mongo
    container_name: mongodb-products
    profiles: ["prod", "dev"]
    ports:
      - "27019:27017"
    volumes:
      - ./container-volumes/db-products/:/data/db
    networks:
      - products_db_net
      - db_seeder_net

  mongodb-shopping:
    extends:
      file: common.yml
      service: base-mongo
    container_name: mongodb-shopping
    profiles: ["prod", "dev"]
    ports:
      - "27020:27017"
    volumes:
      - ./container-volumes/db-shopping/:/data/db
    networks:
      - shopping_db_net
      - db_seeder_net

  # This is a support container used for importing sampledata sets to other mongodb's. 
  # https://www.mongodb.com/docs/database-tools/mongoimport/#std-option-mongoimport.--authenticationDatabase
  mongodb-seeder:
    build:
      context: ./mongodb/seeder
    container_name: mongodb-seeder
    profiles: ["prod", "dev"]
    env_file:
      - ./mongodb/.env
    depends_on:
      mongodb-customer:
        condition: service_healthy
      mongodb-products:
        condition: service_healthy
      mongodb-shopping:
        condition: service_healthy
    ports:
      - "27030:27017"
    networks:
      - db_seeder_net

  # ---------- Backend Services ----------
  customer:
    build:
      dockerfile: Dockerfile.prod
      context: ./customer
    profiles: ["prod"]
    container_name: customer
    ports:
      - "8001:8001"
    restart: on-failure
    depends_on:
      mongodb-seeder:
        condition: service_started
      mongodb-customer:
        # NOTE: specifies that a dependency is expected to be "healthy" (as indicated by healthcheck) before starting a dependent service.
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app/
    env_file:
      - ./customer/.env.prod
    networks:
      - rabbitmq_net
      - backend_net
      - customer_db_net

  products:
    build:
      dockerfile: Dockerfile.prod
      context: ./products
    profiles: ["prod"]
    container_name: products
    ports:
      - "8002:8002"
    restart: on-failure
    depends_on:
      mongodb-seeder:
        condition: service_started
      mongodb-products:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
    env_file:
      - ./products/.env.prod
    networks:
      - rabbitmq_net
      - backend_net
      - products_db_net

  shopping:
    build:
      dockerfile: Dockerfile.prod
      context: ./shopping
    profiles: ["prod"]
    container_name: shopping
    ports:
      - "8003:8003"
    restart: on-failure
    depends_on:
      mongodb-seeder:
        condition: service_started
      mongodb-shopping:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
    env_file:
      - ./shopping/.env.prod
    networks:
      - rabbitmq_net
      - backend_net
      - shopping_db_net

  # ---------- Proxy ----------
  nginx-proxy:
    build:
      dockerfile: Dockerfile
      context: ./proxy
    profiles: ["prod"]
    restart: always
    depends_on:
      - products
      - shopping
      - customer
    ports:
      - 80:80
    networks:
      - backend_net
      - frontend_net

  # ---------- Frontend ----------
  webapp:
    build:
      dockerfile: Dockerfile.prod
      context: ./shopping_app_frontend
    profiles: ["prod"]
    container_name: webapp
    ports:
      - "3000:3000"
    restart: on-failure
    depends_on:
      - "nginx-proxy"
    environment:
      - NODE_ENV=production
    env_file:
      - ./shopping_app_frontend/.env.prod
    networks:
      - frontend_net

# ---------- Networks ----------
networks:
  rabbitmq_net:
    driver: bridge
  backend_net:
    driver: bridge
  frontend_net:
    driver: bridge

  customer_db_net:
    driver: bridge
  products_db_net:
    driver: bridge
  shopping_db_net:
    driver: bridge
  db_seeder_net:
    driver: bridge
