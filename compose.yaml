services:
  rabbitmq:
    image: rabbitmq:3.11.7-management-alpine
    container_name: 'rabbitmq'
    hostname: rabbitmq
    profiles: ["prod", "dev"]
    ports:
      - 5672:5672
      - 15672:15672
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      # NOTE: `timeout` - If a single run of the check takes longer than timeout seconds then the check is considered to have failed.
      timeout: 30s
      # NOTE: `start_period` - provides initialization time for containers that need time to bootstrap.
      # Probe failure during that period will not be counted towards the maximum number of retries.
      start_period: 40s
      retries: 3
    # volumes:
    #   - ./container-volumes/rabbitmq/data/:/var/lib/rabbitmq/
    #   - ./container-volumes/rabbitmq/logs/:/var/log/rabbitmq
    networks:
      - rabbitmq_net

  # Databases
  nosql-db:
    image: mongo
    profiles: ["prod", "dev"]
    ports:
      - "27018:27017"
    container_name: nosql-db
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - ./container-volumes/db/:/data/db
    networks:
      - backend_net

  customer:
    build:
      dockerfile: Dockerfile.prod
      context: ./customer
    profiles: ["prod"]
    container_name: customer
    ports:
      - "8001:8001"
    restart: on-failure
    depends_on:
      nosql-db:
        # NOTE: specifies that a dependency is expected to be "healthy" (as indicated by healthcheck) before starting a dependent service.
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app/
    env_file:
      - ./customer/.env.prod
    networks:
      - rabbitmq_net
      - backend_net

  products:
    build:
      dockerfile: Dockerfile.prod
      context: ./products
    profiles: ["prod"]
    container_name: products
    ports:
      - "8002:8002"
    restart: on-failure
    depends_on:
      nosql-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
    env_file:
      - ./products/.env.prod
    networks:
      - rabbitmq_net
      - backend_net

  shopping:
    build:
      dockerfile: Dockerfile.prod
      context: ./shopping
    profiles: ["prod"]
    container_name: shopping
    ports:
      - "8003:8003"
    restart: on-failure
    depends_on:
      nosql-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
    env_file:
      - ./shopping/.env.prod
    networks:
      - rabbitmq_net
      - backend_net

  nginx-proxy:
    build:
      dockerfile: Dockerfile
      context: ./proxy
    profiles: ["prod"]
    restart: always
    depends_on:
      - products
      - shopping
      - customer
    ports:
      - 80:80
    networks:
      - backend_net
      - frontend_net

  webapp:
    build:
      dockerfile: Dockerfile.prod
      context: ./shopping_app_frontend
    profiles: ["prod"]
    container_name: webapp
    ports:
      - "3000:3000"
    restart: on-failure
    depends_on:
      - "nginx-proxy"
    environment:
      - NODE_ENV=production
    env_file:
      - ./shopping_app_frontend/.env.prod
    networks:
      - frontend_net

networks:
  rabbitmq_net:
    driver: bridge
  backend_net:
    driver: bridge
  frontend_net:
    driver: bridge
