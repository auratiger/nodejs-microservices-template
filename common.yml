# Share Compose configurations between files and projects: https://docs.docker.com/compose/extends/#extending-services

# NOTE: Docker Composeâ€™s extends keyword enables the sharing of common configurations among different files,
# or even different projects entirely. 
# Extending services is useful if you have several services that reuse a common set of configuration options.
# Using extends you can define a common set of service options in one place and refer to it from anywhere.
#
services:

  base-rabbit:
    image: rabbitmq:3.11.7-management-alpine
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: pass123
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      # NOTE: `timeout` - If a single run of the check takes longer than timeout seconds then the check is considered to have failed.
      timeout: 20s
      # NOTE: `start_period` - provides initialization time for containers that need time to bootstrap.
      # Probe failure during that period will not be counted towards the maximum number of retries.
      start_period: 30s
      retries: 3

  base-mongo:
    image: mongo
    restart: on-failure
    # ports:
    #   - "27017:27017"
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: mongo
    #   MONGO_INITDB_ROOT_PASSWORD: mongo
    #
    #   TODO: mongo healthcheck isn't working correctly for some reason
    # healthcheck:
    #   # NOTE: The hostname of the container, let's say `mongo` doesn't exist inside the mongodb container,
    #   # unless you specify hostname: `mongo` in your compose file. 
    #   # Instead it is better to simply use `localhost` which is more common, when doing healthchecks
    #   #
    #   # NOTE: The legacy `mongo` shell was deprecated in `MongoDB 5.0` and removed in `MongoDB 6.0`. 
    #   # The new MongoDB Shell, `mongosh`, offers numerous advantages over the legacy shell.
    #   # 
    #   test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/productiondb --quiet
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 20s
