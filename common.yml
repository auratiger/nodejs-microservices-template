# Share Compose configurations between files and projects: https://docs.docker.com/compose/extends/#extending-services

# NOTE: Docker Composeâ€™s extends keyword enables the sharing of common configurations among different files,
# or even different projects entirely. 
# Extending services is useful if you have several services that reuse a common set of configuration options.
# Using extends you can define a common set of service options in one place and refer to it from anywhere.
#
# NOTE: If a configuration option is defined in both the original service and the local service, 
# the local value either overrides or extends the definition of the original service. 
# This works differently for other configuration options.
services:

  base-rabbit:
    image: rabbitmq:3.11.7-management-alpine
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: pass123
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      # NOTE: `timeout` - If a single run of the check takes longer than timeout seconds then the check is considered to have failed.
      timeout: 20s
      # NOTE: `start_period` - provides initialization time for containers that need time to bootstrap.
      # Probe failure during that period will not be counted towards the maximum number of retries.
      start_period: 30s
      retries: 3

  base-mongo:
    image: mongo:latest
    restart: on-failure
    env_file:
      - ./mongodb/.env
    volumes:
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      # NOTE: The hostname of the container, let's say `mongo` doesn't exist inside the mongodb container,
      # unless you specify hostname: `mongo` in your compose file.
      # Instead it is better to simply use `localhost` which is more common, when doing healthchecks
      #
      # NOTE: The legacy `mongo` shell was deprecated in `MongoDB 5.0` and removed in `MongoDB 6.0`.
      # The new MongoDB Shell, `mongosh`, offers numerous advantages over the legacy shell.
      #
      # NOTE: You need to use double-dollar sign ($$) in order to tell docker-compose not to parse these environment variables.
      # test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      test: echo 'db.runCommand({serverStatus:1}).ok'
      interval: 10s
      start_period: 20s
